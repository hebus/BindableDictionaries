using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Linq.Expressions;
using System.Reflection;
using System.Collections;

namespace Outils
{
    public class SortableBindingList<T> : BindingList<T>
    {
        // reference to the list provided at the time of instantiation
        ListSortDirection sortDirection;
        PropertyDescriptor sortProperty;
        bool isSorted = false;

        // function that refereshes the contents
        // of the base classes collection of elements
        Action<SortableBindingList<T>, List<T>>
                       populateBaseList = (a, b) => a.ResetItems(b);

        // a cache of functions that perform the sorting
        // for a given type, property, and sort direction
        static Dictionary<string, Func<List<T>, IEnumerable<T>>>
           cachedOrderByExpressions = new Dictionary<string, Func<List<T>, IEnumerable<T>>>();


        protected override bool SupportsSortingCore { get { return true; } }
        protected override bool IsSortedCore { get { return isSorted; } }
        protected override ListSortDirection SortDirectionCore { get { return sortDirection; } }
        protected override PropertyDescriptor SortPropertyCore { get { return sortProperty; } }


        protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
        {
#if(!autre)
            /*
             Look for an appropriate sort method in the cache if not found .
             Call CreateOrderByMethod to create one. 
             Apply it to the original list.
             Notify any bound controls that the sort has been applied.
             */
            List<T> originalList = new List<T>(this);
            sortProperty = prop;

            var orderByMethodName = sortDirection ==
                ListSortDirection.Ascending ? "OrderBy" : "OrderByDescending";
            var cacheKey = typeof(T).GUID + prop.Name + orderByMethodName;

            if (!cachedOrderByExpressions.ContainsKey(cacheKey))
            {
                CreateOrderByMethod(prop, orderByMethodName, cacheKey);
            }

            ResetItems(cachedOrderByExpressions[cacheKey](originalList).ToList());
            sortDirection = sortDirection == ListSortDirection.Ascending ?
                            ListSortDirection.Descending : ListSortDirection.Ascending;

            isSorted = true;
            ResetBindings();
#else
            List<T> liste = new List<T>(this);
            liste.Sort(new PropertyComparer<T>(prop.Name, direction));

            sortProperty = prop;
            sortDirection = direction;
            isSorted = true;

            ResetItems(liste);
            ResetBindings();
#endif
        }

        private void CreateOrderByMethod(PropertyDescriptor prop, string orderByMethodName, string cacheKey)
        {

            /*
             Create a generic method implementation for IEnumerable<T>.
             Cache it.
            */

            var sourceParameter = Expression.Parameter(typeof(List<T>), "source");
            var lambdaParameter = Expression.Parameter(typeof(T), "lambdaParameter");
            var accesedMember = typeof(T).GetProperty(prop.Name);
            var propertySelectorLambda =
                Expression.Lambda(Expression.MakeMemberAccess(lambdaParameter,
                                  accesedMember), lambdaParameter);
            var orderByMethod = typeof(Enumerable).GetMethods()
                                          .Where(a => a.Name == orderByMethodName &&
                                                       a.GetParameters().Length == 2)
                                          .Single()
                                          .MakeGenericMethod(typeof(T), prop.PropertyType);

            var orderByExpression = Expression.Lambda<Func<List<T>, IEnumerable<T>>>(
                                        Expression.Call(orderByMethod,
                                                new Expression[] { sourceParameter, 
                                                               propertySelectorLambda }),
                                                sourceParameter);

            cachedOrderByExpressions.Add(cacheKey, orderByExpression.Compile());
        }

        private void ResetItems(List<T> items)
        {
            base.ClearItems();

            for (int i = 0; i < items.Count; i++)
            {
                base.InsertItem(i, items[i]);
            }
        }
    }



    public class PropertyComparer<TValue> : IComparer<TValue>
    {
        private PropertyInfo property;
        private ListSortDirection sortDirection;

        public PropertyComparer(string sortProperty, ListSortDirection sortDirection)
        {
            property = typeof(TValue).GetProperty(sortProperty);
            this.sortDirection = sortDirection;
        }

        #region IComparer<KeyValuePair<TKey,TValue>> Membres

        public int Compare(TValue x, TValue y)
        {
            object valueX = property.GetValue(x, null);
            object valueY = property.GetValue(y, null);

            // 10.11.2011 - s'assurer que les objets sont bien identiques avant de faire la comparaison
            // sinon, on utilise le type string pour comparer
            if (valueX.GetType().Equals(valueY.GetType()))
            {
                if (sortDirection == ListSortDirection.Ascending)
                {
                    return Comparer.Default.Compare(valueX, valueY);
                }
                else
                {
                    return Comparer.Default.Compare(valueY, valueX);
                }
            }
            else
            {
                if (sortDirection == ListSortDirection.Ascending)
                {
                    return Comparer.Default.Compare(valueX.ToString(), valueY.ToString());
                }
                else
                {
                    return Comparer.Default.Compare(valueY.ToString(), valueX.ToString());
                }
            }
        }

        #endregion
    }

}
